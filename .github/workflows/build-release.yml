name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  DEVELOPER_ID: ${{ secrets.DEVELOPER_ID }}
  DEVELOPER_ID_INSTALLER: ${{ secrets.DEVELOPER_ID_INSTALLER }}
  APPLE_ID: ${{ secrets.APPLE_ID }}
  TEAM_ID: ${{ secrets.TEAM_ID }}
  APP_PASSWORD: ${{ secrets.APP_PASSWORD }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-build.txt
    
    - name: Build executable
      run: |
        python scripts/build_executable.py
    
    - name: Create Universal2 binary (macOS only)
      if: matrix.os == 'macos-latest'
      run: |
        python -c "
        from scripts.build_executable import create_universal_binary
        create_universal_binary()
        "
    
    - name: Clean Distribution (macOS only)
      if: matrix.os == 'macos-latest'
      run: |
        # Use the new clean distribution script
        chmod +x packaging/distribute.sh
        ./packaging/distribute.sh ${{ github.ref_name }} arm64
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: address-cleanser-${{ matrix.os }}
        path: dist/
    
    - name: Create checksums
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd dist
        sha256sum * > checksums.txt
    
    - name: Upload checksums
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: checksums
        path: dist/checksums.txt

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Copy executables from each platform
        cp address-cleanser-ubuntu-latest/* release-assets/ 2>/dev/null || true
        cp address-cleanser-windows-latest/* release-assets/ 2>/dev/null || true
        cp address-cleanser-macos-latest/* release-assets/ 2>/dev/null || true
        cp checksums/checksums.txt release-assets/ 2>/dev/null || true
        
        # Copy macOS clean distribution files
        if [ -d "address-cleanser-macos-latest/release" ]; then
          cp address-cleanser-macos-latest/release/* release-assets/ 2>/dev/null || true
        fi
        
        # Create archive with all executables
        cd release-assets
        tar -czf address-cleanser-all-platforms.tar.gz *
        zip -r address-cleanser-all-platforms.zip *
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release-assets/*
        body: |
          ## Address Cleanser ${{ github.ref_name }}
          
          ### Quick Installation
          
          **One-line installer (macOS/Linux):**
          ```bash
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/joshuboi77/address-cleanser/main/packaging/install.sh)"
          ```
          
          **Homebrew (macOS):**
          ```bash
          brew tap joshuboi77/homebrew-address-cleanser
          brew install address-cleanser
          ```
          
          ### Downloads
          
          **All Platforms Archive:**
          - `address-cleanser-all-platforms.tar.gz` (Linux/macOS)
          - `address-cleanser-all-platforms.zip` (Windows)
          
          **Individual Executables:**
          - `address-cleanser-linux-*` - Linux executable
          - `address-cleanser-windows-*.exe` - Windows executable  
          - `address-cleanser-macos-arm64.zip` - macOS ZIP (Apple Silicon)
          
          **macOS Distribution:**
          - `address-cleanser-macos-arm64.zip` - Signed & notarized ZIP
          - `address-cleanser-user.pkg` - Per-user PKG installer (no admin required)
          - `address-cleanser.rb` - Homebrew formula
          - `install.sh` - One-line installer script
          - `checksums.txt` - File integrity verification
          
          ### Installation Options
          
          **macOS:**
          - **ZIP**: Download `address-cleanser-macos-arm64.zip`, extract, run
          - **PKG**: Download `address-cleanser-user.pkg`, installs to ~/.local/bin
          - **Homebrew**: `brew tap joshuboi77/homebrew-address-cleanser && brew install address-cleanser`
          - **One-liner**: `/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/joshuboi77/address-cleanser/main/packaging/install.sh)"`
          
          **Linux:**
          ```bash
          chmod +x address-cleanser-linux-*
          ./address-cleanser-linux-* --help
          ```
          
          **Windows:**
          - Download `address-cleanser-windows-*.exe`
          - Run from Command Prompt or PowerShell
          
          ### Usage Examples
          
          ```bash
          # Process a single address
          address-cleanser single --single "123 Main St, Austin, TX 78701"
          
          # Process a CSV file
          address-cleanser batch --input addresses.csv --output cleaned.csv
          
          # With validation report
          address-cleanser batch --input addresses.csv --output cleaned.csv --report validation.txt
          ```
          
          ### Security & Verification
          
          **macOS Security:**
          - All macOS binaries are codesigned with Developer ID
          - ZIP and PKG packages are notarized by Apple
          - No quarantine flags or manual steps needed
          
          **File Integrity:**
          Verify file integrity using the provided checksums:
          ```bash
          sha256sum -c checksums.txt
          ```
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}